[metadata]
# description-file  =  README.md
name = transit2
version = file: version.txt
author = Thomas R. Ioerger
author_email = ioerger@cs.tamu.edu
description = TRANSIT2 is a tool for the analysis of Tn-Seq data. It provides an easy to use graphical interface and access to three different analysis methods that allow the user to determine essentiality in a single condition as well as between conditions.
long_description = file: README.md
keywords = tnseq, analysis, biology, genome
license = GNU-GPL
classifiers = 
    Development Status :: 5 - Production/Stable
    Programming Language :: Python
    Programming Language :: Python :: 3
    Intended Audience :: Science/Research
    License :: OSI Approved :: GNU General Public License v3 (GPLv3)
    Operating System :: OS Independent
    Topic :: Scientific/Engineering :: Bio-Informatics


[options]
python_requires = >= 3.6 
# include_package_data = True
package_dir=
    =src
packages=find:
install_requires = 
    wxPython
    attrdict ~= 2.0.1
    numpy ~= 1.16
    scipy ~= 1.2
    matplotlib ~= 3.0
    scikit-learn ~= 1.1.3
    statsmodels ~= 0.9
    pandas ~= 2.0.2
    seaborn >= 0.11.2
    ez-yaml ~= 2.0.2
    super-hash ~= 1.2.8
    mne ~= 1.5.1

[options.entry_points]
console_scripts =
    transit = pytransit.__main__:run_main
    tpp = pytpp.__main__:run_main

[options.packages.find]
where=src
include =
    __dependencies__/*.py
    __dependencies__/*.json
    __dependencies__/*.yaml
    src/pytransit/doc*
exclude =
    __pycache__*
    __dependencies__*
    ruamel/yaml/_test*
# packages  =  [pytransit.specific_tools ] + find_packages(src exclude = [contrib tests])
# Versions should comply with PEP440.  For a discussion on single-sourcing
# the version across setup.py and the project code see
# https://packaging.python.org/en/latest/single_source_version.html

# long_description_content_type = text/markdown

# The projects main homepage.
# url = https://orca1.tamu.edu/essentiality/transit/index.html
# download_url = https://github.com/ioerger/transit2

# Author details

# Choose your license
# See https://pypi.python.org/pypi?%3Aaction = list_classifiers


# What does your project relate to?

# You can just specify the packages manually here if your project is
# simple. Or you can use find_packages().
#packages  =  [pytransit]
# package_dir  =  {pytransit: src/pytransit  pytpp: src/pytpp}
#py_modules  =  [tpp]

# Alternatively if you want to distribute just a my_module.py uncomment
# this:
#   py_modules = ["my_module"]

# List run-time dependencies here.  These will be installed by pip when
# your project is installed. For an analysis of "install_requires" vs pips
# requirements files see:
# https://packaging.python.org/en/latest/requirements.html
# wxPython is needed for GUI only but go ahead and install them

#dependency_links  =  [
#	"git+https://github.com/wxWidgets/wxPython.git#egg = wxPython"
#]

# List additional groups of dependencies here (e.g. development
# dependencies). You can install these using the following syntax
# for example:
# $ pip install -e .[devtest]
#extras_require = {
#    dev: [check-manifest]
#    test: [coverage]
#}

# If there are data files included in your packages that need to be
# installed specify them here.  If using Python 2.6 or less then these
# have to be included in MANIFEST.in as well.
# package_data = package_data

#scripts = [src/tpp.py src/transit.py]

# Although package_data is the preferred approach in some case you may
# need to place data files outside of your packages. See:
# http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files # noqa
# In this case data_file will be installed into <sys.prefix>/my_data
#data_files = [(transitdata [package_data.dat])]

# To provide executable scripts use entry points in preference to the
# "scripts" keyword. Entry points provide cross-platform support and allow
# # pip to create the appropriate form of executable for the target platform.
# entry_points = {
#     console_scripts: [
#         transit = pytransit.__main__:run_main
#         tpp = pytpp.__main__:run_main
#     ]
# }
# cmdclass = {
#     upload: UploadCommand
# }